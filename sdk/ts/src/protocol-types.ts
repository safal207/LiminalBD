// This file is auto-generated by protocol/codegen.js. Do not edit manually.

export interface AuthCommand {
  "op": "auth";
  "keyId": string;
  "secret": string;
  "namespace"?: string;
};

export interface LqlCommand {
  "op": "lql";
  "id": string;
  "query": string;
  "parameters"?: Record<string, unknown>;
};

export interface SubscribeCommand {
  "op": "subscribe";
  "id": string;
  "pattern": string;
  "options"?: {
  "mode"?: "live" | "replay";
  "cursor"?: string;
  "limit"?: number;
};
};

export interface UnsubscribeCommand {
  "op": "unsubscribe";
  "id": string;
};

export interface IntentTextCommand {
  "op": "intent.text";
  "text": string;
  "lang"?: string;
};

export interface IntentInvokeCommand {
  "op": "intent";
  "kind": string;
  "payload": Record<string, unknown>;
};

export interface SeedPlantCommand {
  "op": "seed.plant";
  "id": string;
  "spec": Record<string, unknown>;
};

export interface SeedAbortCommand {
  "op": "seed.abort";
  "id": string;
  "reason"?: string;
};

export interface SeedGardenCommand {
  "op": "seed.garden";
};

export interface DreamNowCommand {
  "op": "dream.now";
  "intensity"?: number;
};

export interface SyncNowCommand {
  "op": "sync.now";
  "scope"?: "session" | "global";
};

export interface AwakenNowCommand {
  "op": "awaken.now";
};

export interface MirrorTimelineCommand {
  "op": "mirror.timeline";
  "range": {
  "from": string;
  "to": string;
};
};

export interface MirrorReplayCommand {
  "op": "mirror.replay";
  "cursor"?: string;
};

export interface NoeticProposeCommand {
  "op": "noetic.propose";
  "proposal": Record<string, unknown>;
};

export interface NoeticPeersCommand {
  "op": "peers.list";
};

export interface SnapshotCommand {
  "op": "snapshot";
  "scope"?: "session" | "global";
};

export interface PeerAddCommand {
  "op": "peers.add";
  "peer": Record<string, unknown>;
};

export interface PeerListCommand {
  "op": "peers.list";
};

export interface QuotaCommand {
  "op": "quota";
  "namespace"?: string;
};

export type CommandEnvelope = AuthCommand | LqlCommand | SubscribeCommand | UnsubscribeCommand | IntentTextCommand | IntentInvokeCommand | SeedPlantCommand | SeedAbortCommand | SeedGardenCommand | DreamNowCommand | SyncNowCommand | AwakenNowCommand | MirrorTimelineCommand | MirrorReplayCommand | NoeticProposeCommand | NoeticPeersCommand | SnapshotCommand | PeerAddCommand | PeerListCommand | QuotaCommand;

export interface BaseEvent {
  "id": string;
  "ts": string;
  "correlationId"?: string;
};

export type LqlEvent = {

} & {
  "kind": "lql";
  "result": Record<string, unknown>[];
};

export type ViewEvent = {

} & {
  "kind": "view";
  "stream": string;
  "payload": Record<string, unknown>;
};

export type HarmonyEvent = {

} & {
  "kind": "harmony";
  "score": number;
  "trend"?: "up" | "down" | "steady";
};

export type DreamEvent = {

} & {
  "kind": "dream";
  "phase": string;
  "details"?: Record<string, unknown>;
};

export type CollectiveDreamEvent = {

} & {
  "kind": "collective_dream";
  "members": string[];
};

export type AwakenEvent = {

} & {
  "kind": "awaken";
  "summary"?: string;
};

export type EchoEvent = {

} & {
  "kind": "echo";
  "status": string;
};

export type StatusEvent = {

} & {
  "kind": "status";
  "state": string;
  "metrics"?: Record<string, unknown>;
};

export type ExplainEvent = {

} & {
  "kind": "explain";
  "explanation": string;
};

export type SeedEvent = {

} & {
  "kind": "seed";
  "status": "planted" | "growing" | "harvested" | "aborted";
  "yield"?: Record<string, unknown>;
};

export type MirrorEvent = {

} & {
  "kind": "mirror";
  "entries": Record<string, unknown>[];
};

export type NoeticEvent = {

} & {
  "kind": "noetic";
  "stage": "proposed" | "voting" | "committed";
  "context"?: Record<string, unknown>;
};

export type AuditEvent = {

} & {
  "kind": "audit";
  "actor": string;
  "action": string;
  "details"?: Record<string, unknown>;
};

export type AlertEvent = {

} & {
  "kind": "alert";
  "severity": "info" | "warning" | "critical";
  "message": string;
};

export type EventEnvelope = BaseEvent | LqlEvent | ViewEvent | HarmonyEvent | DreamEvent | CollectiveDreamEvent | AwakenEvent | EchoEvent | StatusEvent | ExplainEvent | SeedEvent | MirrorEvent | NoeticEvent | AuditEvent | AlertEvent;
